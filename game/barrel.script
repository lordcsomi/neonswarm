go.property("auto_aim", true)

function init(self)
	msg.post(".", "acquire_input_focus") -- Acquire input focus
	self.target_angle = 0  -- The target angle to rotate towards
	self.is_rotating = false -- Flag to check if it's already animating
	self.enemies = {}
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.pressed then
		local pos = go.get_position() 
		local dx = action.x - pos.x
		local dy = action.y - pos.y

		-- Calculate target angle (in degrees) and adjust by 180 degrees to face the touch
		local target_angle = math.atan2(dy, dx) * 180 / math.pi + 180

		-- Normalize target angle to the range [0, 360)
		if target_angle < 0 then
			target_angle = target_angle + 360
		elseif target_angle >= 360 then
			target_angle = target_angle - 360
		end

		-- Get the current angle of the cannon barrel
		local current_angle = go.get(".", "euler.z")


		-- Calculate the shortest rotation direction
		local angle_diff = (target_angle - current_angle + 540) % 360 - 180
		local shortest_angle = current_angle + angle_diff

		-- Start rotating the barrel to the calculated shortest angle
		rotate_barrel(self, shortest_angle)
	end
end

-- Function to rotate the barrel smoothly
function rotate_barrel(self, target_angle)
	if self.is_rotating then
		return
	end
	self.is_rotating = true

	-- Animate the rotation using go.animate
	go.animate(".", "euler.z", go.PLAYBACK_ONCE_FORWARD, target_angle, go.EASING_INOUTSINE, 0.5, 0, function()
		self.is_rotating = false -- Reset the flag when the animation is done
	end)
end


function find_closest_enemy(self)
	local barrel_pos = go.get_position()
	local closest_enemy = nil
	local closest_distance = math.huge
	local angle_to_enemy = 0

	for _, enemy_pos in ipairs(self.enemies) do
		local dx = enemy_pos.x - barrel_pos.x
		local dy = enemy_pos.y - barrel_pos.y
		local distance = math.sqrt(dx * dx + dy * dy)

		if distance < closest_distance then
			closest_distance = distance
			closest_enemy = enemy_pos
			angle_to_enemy = math.atan2(dy, dx) * 180 / math.pi + 180

			-- Normalize angle to range [0, 360)
			if angle_to_enemy < 0 then
				angle_to_enemy = angle_to_enemy + 360
			elseif angle_to_enemy >= 360 then
				angle_to_enemy = angle_to_enemy - 360
			end
		end
	end

	return closest_enemy, angle_to_enemy
end

function update(self, dt)
	if self.auto_aim then
		local closest_enemy, angle_to_enemy = find_closest_enemy(self)
		if closest_enemy then
			rotate_barrel(self, angle_to_enemy)
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("update_enemies") then
		self.enemies = message.enemies
	end
end
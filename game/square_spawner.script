go.property("spawn_delay", 1)

function init(self)
	self.min_spawn_rate = 0.2       -- Minimum spawn rate
	self.spawn_rate_decrease = 0.95 -- Factor to decrease spawn rate

	-- Default screen size in case the message is not received
	self.screen_width = 640
	self.screen_height = 1136

	-- List to keep track of active square URLs
	self.active_squares = {}

	-- Define sides as functions that generate random points on the respective sides
	self.sides = {
		bottom = function() return vmath.vector3(math.random(0, self.screen_width), -10, 0) end,
		top = function() return vmath.vector3(math.random(0, self.screen_width), self.screen_height + 10, 0) end,
		left = function() return vmath.vector3(-10, math.random(0, self.screen_height), 0) end,
		right = function() return vmath.vector3(self.screen_width + 10, math.random(0, self.screen_height), 0) end,
	}

	-- Timer to spawn objects
	timer.delay(self.spawn_delay, true, function()
		-- Pick a random side and generate a point
		local side_keys = {"bottom", "top", "left", "right"}
		local random_side = side_keys[math.random(1, #side_keys)]
		local spawn_point = self.sides[random_side]()

		-- Create object at the generated point
		local square = collectionfactory.create("#square_factory", spawn_point, nil, {}, 1)

		-- Store the main game object URL of the created square
		table.insert(self.active_squares, square[hash("/square")])
	end)
end

function update(self, dt)
	-- Clean up inactive squares from the list
	for i = #self.active_squares, 1, -1 do
		if not go.exists(self.active_squares[i]) then
			table.remove(self.active_squares, i)
		end
	end

	-- Send enemy positions to the barrel
	msg.post("game:/barrel", "update_enemies", { enemies = get_square_positions(self) })
end

function get_square_positions(self)
	local positions = {}
	for _, square_url in ipairs(self.active_squares) do
		if go.exists(square_url) then
			table.insert(positions, go.get_position(square_url))
		end
	end
	return positions
end

function on_message(self, message_id, message, sender)
	if message_id == hash("update_size") then
		-- Update the screen size based on the message from the GUI script
		self.screen_width = message.width
		self.screen_height = message.height
		print("Updated screen size:", self.screen_width, self.screen_height)
	end
end
